(ns advent-of-code-2021.6
  (:require [clojure.test :refer :all]))

(defn lf [fs]
  (flatten
    (map (fn [f] (if (> f 0)
                   [(dec f)]
                   [6 8]
                   )) fs)))

(defn lf [fs]
  (reduce (fn [acc f]
            (if (> f 0)
              (conj acc (dec f))
              (conj acc 6 8))) [] fs))

(defn all-lf [init days]
  (count (first (drop days (iterate lf init))))
  )

(defn fish-frequency [fs]
  (let [m (frequencies fs)]
    (map #(get m % 0) (range 9))))

(defn next-day [m]
  (let [[a-0 a-1 a-2 a-3 a-4 a-5 a-6 a-7 a-8] m]
    [a-1 a-2 a-3 a-4 a-5 a-6 (+ a-7 a-0) a-8 a-0]))

(defn fish-generations [init days]
  (let [generations (->> init
                         fish-frequency
                         (iterate next-day))]
    (apply + (nth generations days))))

(prn (fish-generations [3, 5, 1, 2, 5, 4, 1, 5, 1, 2, 5, 5, 1, 3, 1, 5, 1, 3, 2, 1, 5, 1, 1, 1, 2, 3, 1, 3, 1, 2, 1, 1, 5, 1, 5, 4, 5, 5, 3, 3, 1, 5, 1, 1, 5, 5, 1, 3, 5, 5, 3, 2, 2, 4, 1, 5, 3, 4, 2, 5, 4, 1, 2, 2, 5, 1, 1, 2, 4, 4, 1, 3, 1, 3, 1, 1, 2, 2, 1, 1, 5, 1, 1, 4, 4, 5, 5, 1, 2, 1, 4, 1, 1, 4, 4, 3, 4, 2, 2, 3, 3, 2, 1, 3, 3, 2, 1, 1, 1, 2, 1, 4, 2, 2, 1, 5, 5, 3, 4, 5, 5, 2, 5, 2, 2, 5, 3, 3, 1, 2, 4, 2, 1, 5, 1, 1, 2, 3, 5, 5, 1, 1, 5, 5, 1, 4, 5, 3, 5, 2, 3, 2, 4, 3, 1, 4, 2, 5, 1, 3, 2, 1, 1, 3, 4, 2, 1, 1, 1, 1, 2, 1, 4, 3, 1, 3, 1, 2, 4, 1, 2, 4, 3, 2, 3, 5, 5, 3, 3, 1, 2, 3, 4, 5, 2, 4, 5, 1, 1, 1, 4, 5, 3, 5, 3, 5, 1, 1, 5, 1, 5, 3, 1, 2, 3, 4, 1, 1, 4, 1, 2, 4, 1, 5, 4, 1, 5, 4, 2, 1, 5, 2, 1, 3, 5, 5, 4, 5, 5, 1, 1, 4, 1, 2, 3, 5, 3, 3, 1, 1, 1, 4, 3, 1, 1, 4, 1, 5, 3, 5, 1, 4, 2, 5, 1, 1, 4, 4, 4, 2, 5, 1, 2, 5, 2, 1, 3, 1, 5, 1, 2, 1, 1, 5, 2, 4, 2, 1, 3, 5, 5, 4, 1, 1, 1, 5, 5, 2, 1, 1]
                       256))

(deftest asda-test

  ;(prn (lf [3, 4, 3, 1, 2]))
  ;(prn (lf [1,2,1,6,0,8]))

  (let [init [3, 4, 3, 1, 2]
        days 81]

    (prn (lf (lf init)))

    (prn (fish-generations init 80))

    ;(prn (take 2 (iterate lf init)))

    ;(prn (take 1 (iterate lf init)))
    ;(prn (take 2 (iterate lf init)))
    ;(prn (count (last (take days (iterate lf init)))))
    ;(prn (all-lf-m init 18))


    ;(clojure.pprint/pprint (map #(vec [(inc %) (last (take (inc %) (iterate lf init)))]) (range 1 19)))
    )

  (prn (fish-generations [3, 5, 1, 2, 5, 4, 1, 5, 1, 2, 5, 5, 1, 3, 1, 5, 1, 3, 2, 1, 5, 1, 1, 1, 2, 3, 1, 3, 1, 2, 1, 1, 5, 1, 5, 4, 5, 5, 3, 3, 1, 5, 1, 1, 5, 5, 1, 3, 5, 5, 3, 2, 2, 4, 1, 5, 3, 4, 2, 5, 4, 1, 2, 2, 5, 1, 1, 2, 4, 4, 1, 3, 1, 3, 1, 1, 2, 2, 1, 1, 5, 1, 1, 4, 4, 5, 5, 1, 2, 1, 4, 1, 1, 4, 4, 3, 4, 2, 2, 3, 3, 2, 1, 3, 3, 2, 1, 1, 1, 2, 1, 4, 2, 2, 1, 5, 5, 3, 4, 5, 5, 2, 5, 2, 2, 5, 3, 3, 1, 2, 4, 2, 1, 5, 1, 1, 2, 3, 5, 5, 1, 1, 5, 5, 1, 4, 5, 3, 5, 2, 3, 2, 4, 3, 1, 4, 2, 5, 1, 3, 2, 1, 1, 3, 4, 2, 1, 1, 1, 1, 2, 1, 4, 3, 1, 3, 1, 2, 4, 1, 2, 4, 3, 2, 3, 5, 5, 3, 3, 1, 2, 3, 4, 5, 2, 4, 5, 1, 1, 1, 4, 5, 3, 5, 3, 5, 1, 1, 5, 1, 5, 3, 1, 2, 3, 4, 1, 1, 4, 1, 2, 4, 1, 5, 4, 1, 5, 4, 2, 1, 5, 2, 1, 3, 5, 5, 4, 5, 5, 1, 1, 4, 1, 2, 3, 5, 3, 3, 1, 1, 1, 4, 3, 1, 1, 4, 1, 5, 3, 5, 1, 4, 2, 5, 1, 1, 4, 4, 4, 2, 5, 1, 2, 5, 2, 1, 3, 1, 5, 1, 2, 1, 1, 5, 2, 4, 2, 1, 3, 5, 5, 4, 1, 1, 1, 5, 5, 2, 1, 1]
                         256))
  )

(comment


  (sort [6, 0, 6, 4, 5, 6, 0, 1, 1, 2, 6, 0, 1, 1, 1, 2, 2, 3, 3, 4, 6, 7, 8, 8, 8, 8])

  (sort [6 8 1 1 3 0 2 2 4 6 8 1 1 3 4 6 6 8 6 8 1 5 7 0 0 2])
  )